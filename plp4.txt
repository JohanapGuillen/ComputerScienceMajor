Loops
C++ includes a variety of Loops such as the while, do/while, for, foreach. The while loop takes in a condition and as long as that condition remains to be true, the loop will run through the block of code. The do/while loop is very much like the while loop but differs in first checking if the condition is true and then repeating the block of code as long as the condition continues to remain true. The for loop includes knowing how many times the user wants to loop through the block of code, specifying that amount in the statements so that the code is only run that exact amount of times. The foreach loop differs from the for loop because rather than running the code block a specific number of times, it runs through elements of a containers such as arrays, vectors and so on and performs action with each element. 


Functions
        Declaring a function in C++ involves telling the compiler about its name, return type and parameter. The function definition is the body of the function, the block of code that runs. While C++ has various built in functions, programmers themselves can write their own. The program must always include an int main() function in which the rest of the functions can be called. Outside of that function will be the rest of the functions separately declared, the order does not matter as C++ uses a compiler to run. The format of a typical function is return_type function_name(paremeters){ body of the function}. Clearer examples are provided in the code of this section. 
        Functions can take in multiple parameters, during the function call, the parameters must be listed in the order that the function will receive them. The types of parameters that can be passed are values, pointers and references. C++ does allow one function to take in different data types as parameters, a useful feature that expands the work that can be done with functions. Programmers just have to be very careful to specify the data types in the function declarations and use proper syntax.
        Recursive functions are also permitted. Recursive functions are functions that call themselves using the recursion technique. These functions continue to run until a certain condition is met and just like the other functions, recursive functions are called in the main function. To make sure conditions are met and the recursive doesn’t call itself an endless amount of times, it is essential to use if and else statemtents or anything similar in which one branch can call the recursive function while the other does not.
        Inrerstingly enough, functions in C++ do not return multiple values. However, using a method called “call by address” or “call by reference” and the invoker function to pass 2 variables to store the results. This function will take in pointer type data. More details pertaining to this “bypassing” method can be found at https://www.tutorialspoint.com/returning-multiple-values-from-a-cplusplus-function . Additionally, another unofficial way of returning multiple values from a function is with the std::pair, std::tuple or local struct. More details on that can be found at https://www.educative.io/answers/how-to-return-multiple-values-from-a-function-in-cpp17 .
        C++ are pass-by value by default when it comes to primitive data types but when it comes to non-primitive data types, those are pass-by reference by default. It’s important to consider that passing by const reference is the ideal pass in order to avoid argument modification but in the case that one does need to modify a function argument locally, passing by a value woul then be ideal. While for simple down to earth code, one or the other passing features works but in the case of more complicated programs, const references with the proper understanding will come with less errors down the line.
        When it comes to storage, parameters are stored in the parameter list which is located in the caller’s Data Structure and Algorithms but to ensure ALL parameters are stored in the list, a compiler option XPLINK(STORAGWARGS) may be utilized. As for local variables, they are stored in the memory are of the corresponding function. They’re usually stored in RAM, either the Heap or the Stack. Since these are at different locations, pointers are used to gain access to them when necessary.
        
        
Scopes
        There are five types of scopes in C++; function scope, file scope, block scope, function prototype and class scope. The function scope contains identifiers that can only be accessed in the function that declares them. The file scope has the availability of the variable throughout the file or program, having a global scope. This makes it available everywhere to every function and block in the program. The identifiers with file scope are global variables, function definitions and function prototypes placed outside of all functions. Block scopes are contained within curly braces. Identifiers declared in a block are visible only from the point that they are defined until thee moment before the code block comes to an end. The function prototype scope consists of a parameters list that serves as placeholders for variable identifiers. There is no storage allocated or reserved for them and are not visible outside of the function prototype. Finally, the class scope consists of a class member being local to its class.